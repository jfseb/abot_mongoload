{"version":3,"sources":["/projects/nodejs/botbuilder/abot_stringdist/src/../src/makeQuery.ts"],"names":[],"mappings":"AAAA,YAAY,CAAA;;AAWX,CAAC;AAEF,yCAAyC;AAEzC,gCAAuC,IAAe;IACpD,IAAI,GAAG,GAAG,EAAE,MAAM,EAAG,EAAE,GAAG,EAAG,EAAE,EAAE,EAAE,CAAC;IACpC,IAAI,CAAC,OAAO,CAAC,GAAG;QACd,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC;QAC5B,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,GAAI,GAAG,GAAG,GAAG,CAAC;IACnC,CAAC,CAAC,CAAC;IACH,MAAM,CAAC,GAAG,CAAC;AACb,CAAC;AAPD,wDAOC;AAED,wBAA+B,OAAkB;IAC/C,IAAI,GAAG,GAAG,EAAE,MAAM,EAAG,EAAE,EAAC,CAAC;IACzB,OAAO,CAAC,OAAO,CAAC,MAAM;QACpB,GAAG,CAAC,MAAM,CAAE,MAAM,CAAC,GAAG,CAAE,GAAG,MAAM,CAAC,KAAK,CAAC;IAC1C,CAAC,CAAC,CAAC;IACH,MAAM,CAAC,GAAG,CAAC;AACb,CAAC;AAND,wCAMC;AAED,6BAAoC,IAAe;IACjD,IAAI,GAAG,GAAG,EAAE,QAAQ,EAAG,EAAE,GAAG,EAAG,CAAC,EAAE,EAAE,CAAC;IACrC,IAAI,CAAC,OAAO,CAAC,GAAG;QACd,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACxB,CAAC,CAAC,CAAC;IACH,MAAM,CAAC,GAAG,CAAC;AACb,CAAC;AAND,kDAMC;AAED,wBAA+B,OAAmB,EAAE,aAAwB;IAE1E,IAAI,MAAM,GAAG,cAAc,CAAC,OAAO,CAAC,CAAC;IACrC,IAAI,KAAK,GAAG,sBAAsB,CAAC,aAAa,CAAC,CAAC;IAClD,IAAI,UAAU,GAAG,mBAAmB,CAAC,aAAa,CAAC,CAAC;IACpD,MAAM,CAAC,CAAC,MAAM,EAAC,KAAK,EAAC,UAAU,CAAC,CAAC;AAEnC,CAAC;AAPD,wCAOC","file":"makeQuery.js","sourcesContent":["'use strict'\r\n\r\n// based on: http://en.wikibooks.org/wiki/Algorithm_implementation/Strings/Levenshtein_distance\r\n// and:  http://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance\r\n\r\nimport * as mongoose from 'mongoose';\r\nimport * as m2s from './model2schema.js';\r\n\r\nexport interface IFilter {\r\n  cat : string,\r\n  value : string\r\n};\r\n\r\n/* construct a mongo query from an AST */\r\n\r\nexport function makeMongoDistinctGroup(cols : string[]) : any {\r\n  var res = { $group : { _id : {} } };\r\n  cols.forEach(col => {\r\n    res.$group[col] = '$' + col;\r\n    res.$group._id[col]  = '$' + col;\r\n  });\r\n  return res;\r\n}\r\n\r\nexport function makeMongoMatch(filters: IFilter[]) {\r\n  var res = { $match : {}};\r\n  filters.forEach(filter => {\r\n    res.$match[ filter.cat ] = filter.value;\r\n  });\r\n  return res;\r\n}\r\n\r\nexport function makeMongoProjection(cols : string[]) : any {\r\n  var res = { $project : { _id : 0 } };\r\n  cols.forEach(col => {\r\n    res.$project[col] = 1;\r\n  });\r\n  return res;\r\n}\r\n\r\nexport function makeMongoQuery(filters : IFilter[], resultcolumns : string[]) : any {\r\n\r\n  var filter = makeMongoMatch(filters);\r\n  var group = makeMongoDistinctGroup(resultcolumns);\r\n  var projection = makeMongoProjection(resultcolumns);\r\n  return [filter,group,projection];\r\n\r\n}\r\n"],"sourceRoot":"ABC"}