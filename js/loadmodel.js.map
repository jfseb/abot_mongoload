{"version":3,"sources":["/projects/nodejs/botbuilder/abot_stringdist/src/../src/loadmodel.ts"],"names":[],"mappings":"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","file":"loadmodel.js","sourcesContent":["'use strict'\r\n\r\n// based on: http://en.wikibooks.org/wiki/Algorithm_implementation/Strings/Levenshtein_distance\r\n// and:  http://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance\r\n\r\n\r\n\r\nimport * as mongoose from 'mongoose';\r\n\r\nimport * as m2s from './model2schema.js';\r\n\r\nmongoose.connect('mongodb://localhost/testmodel');\r\n\r\nvar modelpath = process.env.ABOT_MODELPATH || \"node_modules/abot_testmodel/testmodel\";\r\n\r\n\r\n\r\nvar models = m2s.readFileAsJSON(modelpath + \"/models.json\");\r\n\r\n (<any>mongoose).Promise = global.Promise;\r\n\r\n\r\nfunction deleteAll(model : mongoose.Model<any>) {\r\n  return model.collection.drop();\r\n}\r\n\r\nfunction readOneModel(sModelName : string) {\r\n  var mdl = m2s.loadModel(modelpath, sModelName);\r\n  var res =   m2s.mergeModelJson(sModelName,mdl);\r\n  var mdldata = m2s.loadModelData(modelpath, sModelName);\r\n  var mdlDocs = m2s.makeDocuments(mdldata,mdl);\r\n  var schema = new mongoose.Schema(res.props);\r\n  schema.index(res.index);\r\n  var mongodomainname = m2s.makeMongoName(mdl.domain);\r\n  var model = mongoose.model(mongodomainname, schema);\r\n  var cnt = 0;\r\n  return deleteAll(model).catch(err => console.log(\"could not delete \" +mongodomainname))\r\n  .then( a => {\r\n     var aPromises = mdlDocs.map(doc => {\r\n      var oDoc = new model(doc);\r\n      return  oDoc.save().then( a => { ++cnt; }).catch(err => console.log(\"error inserting \" + err + \"  inserting : \" + JSON.stringify(doc) + \"\" ))\r\n    });\r\n    return Promise.all(aPromises);\r\n  //  return global.Promise.prototype.all(aPromises);\r\n  }).then(a => {\r\n    console.log(`inserted ${cnt} documents for domain ${mongodomainname}`);\r\n  }).catch(err => {\r\n    console.log(`error inserting documents for domain ${mongodomainname}`);\r\n  });\r\n}\r\n\r\n/*\r\n  var Kitten = mongoose.model('Kitten', kittySchema);\r\n\r\n  var silence = new Kitten({ _id : 7, name: 'Silence' }) as any;\r\n  console.log(silence.name); // 'Silence'\r\n\r\n  var doc2 = new Kitten({ _id : 10, name: 'ACat' }) as any;\r\n\r\n  silence.save(function (err, fluffy) {\r\n    if (err) return console.error(err);\r\n    //fluffy.speak();\r\n  });\r\n\r\n  doc2.save(function (err, fluffy) {\r\n    if (err) return console.error(err);\r\n    //fluffy.speak();\r\n  });\r\n\r\n  type TKitten = {\r\n    _id: String,\r\n    name: String\r\n  };\r\n\r\n  console.log(JSON.stringify(mongoose.model('Kitten').schema.get('name')));\r\n\r\n  Kitten.find(function (err, kittens: TKitten[]) {\r\n    if (err) return console.error(err);\r\n    console.log(kittens);\r\n    kittens.forEach((kit, index) => {\r\n      if (index === 0) {\r\n        Kitten.findById(kit._id).then(fkit =>\r\n          fkit.remove().then(\r\n            e => {\r\n              console.log('removed ' + kit._id);\r\n            }\r\n          ).catch(err => console.log(err)));\r\n      }\r\n    });\r\n  });\r\n}\r\n*/\r\n\r\nvar db = mongoose.connection;\r\ndb.on('error', console.error.bind(console, 'connection error:'));\r\ndb.once('open', function () {\r\n  // we're connected!\r\n  console.log('here model names : ' + db.modelNames());\r\n  //readOneModel(models[0]);\r\n  Promise.all(models.map(mdl => readOneModel(mdl)))\r\n  .then( a => {\r\n    console.log(\"insertead all models\");\r\n    db.close();\r\n  });\r\n  console.log('now model names : ' + db.modelNames());\r\n  console.log('done');\r\n});\r\n"],"sourceRoot":"ABC"}